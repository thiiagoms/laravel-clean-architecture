{"version":1,"defects":{"Tests\\Feature\\User\\Register\\RegisterUserTest::testItShouldRegisterNewUserAndReturnCreatedUserData":7,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserName#should return that the name field must be a string when the name field is not a valid string":7,"Tests\\Unit\\Validtors\\Auth\\HashValidatorTest::testItShouldReturnTrueWhenPasswordMatchCorrectlyWithPasswordHash":8,"Tests\\Unit\\Validtors\\Auth\\HashValidatorTest::testItShouldReturnFalsewhenPasswordDoesNotMatchCorrectlyWithPasswordHash":7,"Tests\\Unit\\Services\\User\\Find\\FindUserByEmailServiceTest::testItShouldThrowLogicalExceptionWithInvalidEmailMessageWhenEmailProvidedIsInvalid":7,"Tests\\Unit\\Services\\User\\Find\\FindUserByEmailServiceTest::testItShouldReturnFalseWhenEmailProvidedIsValidButDoesNotExistInDatabase":8,"Tests\\Unit\\Services\\User\\Find\\FindUserByEmailServiceTest::testItShouldReturnUserWhenEmailProvidedIsValidAndExistsInDatabase":7,"Tests\\Unit\\Auth\\Authenticate\\AuthenticateUserServiceTest::testItShouldThrowLogicalExceptionWithInvalidEmailMessageWhenEmailProvidedIsInvalid":8,"Tests\\Unit\\Services\\Auth\\Authenticate\\AuthenticatorUserServiceTest::testItShouldThrowAuthenticationExceptionWithInvalidCredentialMessagesWhenUserDoesNotExists":7,"Tests\\Unit\\Services\\Auth\\Authenticate\\AuthenticatorUserServiceTest::testItShouldThrowAuthenticationExceptionWithInvalidCredentialMessagesWhenUserExistsButPasswordDoesNotMatch":5,"Tests\\Unit\\Services\\Auth\\Token\\TokenExceptionHandlerTest::testItShoudlThrowAuthenticationEXceptionWithInvalidCredentialsMessageWhenTokenIsNotATokenString":5,"Tests\\Unit\\Services\\Auth\\Token\\TokenGeneratorServiceTest::testItShoudlReturnUserTokenWhenUserCanAuthenticateWithValidCredentials":5,"Tests\\Unit\\Services\\Auth\\Token\\TokenGeneratorServiceTest::testItShoudlReturnTokenDTOWhenReceiveAUsertoken":8,"Tests\\Unit\\Auth\\Authenticate\\AuthenticateUserServiceTest::testItShouldThrowAuthenticationExceptionWithInvalidCredentialMessagesWhenUserEmailDoesNotExists":8,"Tests\\Unit\\Auth\\Authenticate\\AuthenticateUserServiceTest::testItShouldThrowAuthenticationExceptionWithInvalidCredentialMessagesWhenUserExistsButPasswordDoesNotMatch":8,"Tests\\Feature\\Auth\\AuthenticateUserTest::testItShouldReturnInvalidCredentialsMessageWhenUserEmailExistsButPasswordIsInvalid":5,"Tests\\Feature\\Auth\\AuthenticateUserTest::testItshouldReturnUserTokenWhenCredentialsProvidedMatchWithUserInDatabase":7,"Tests\\Feature\\Task\\Register\\RegisterTaskTest::testItShouldReturnUnauthenticatedMessageWhenUserTryToCreateTaskButIsNotAuthenticated":7},"times":{"Tests\\Unit\\Helpers\\ArrayHelperTest::testRemoveEmptyHelper#should remove empty values from array and return new array without empty values":0.005,"Tests\\Unit\\Helpers\\ArrayHelperTest::testRemoveEmptyHelper#should return entire array if payload array is not empty":0,"Tests\\Unit\\Helpers\\ArrayHelperTest::testRemoveEmptyHelper#should return empty array if payload array is empty":0,"Tests\\Unit\\Helpers\\StringHelperTest::testCleanHelper#should remove spaces and html tags from string":0,"Tests\\Unit\\Helpers\\StringHelperTest::testCleanHelper#should remove spaces and html tags from each element of array":0,"Tests\\Unit\\Helpers\\StringHelperTest::testCleanHelper#should return empty array if payload is empty":0,"Tests\\Unit\\Helpers\\StringHelperTest::testIsEmailHelper#should return true if email is valid":0,"Tests\\Unit\\Helpers\\StringHelperTest::testIsEmailHelper#should return false if email is not valid":0,"Tests\\Unit\\Helpers\\StringHelperTest::testIsEmailHelper#should return false if email is empty":0,"Tests\\Unit\\Services\\User\\Register\\RegisterUserServiceTest::testItShoudlThrowLogicalExceptionWithInvalidEmailMessageWhenEmailProvidedisInvalid":0.002,"Tests\\Unit\\Services\\User\\Register\\RegisterUserServiceTest::testItShouldThrowDomainExceptionWithEmailAlreadyExistsMessageWhenEmailProvidedIsValidButAlreadyExists":0.001,"Tests\\Unit\\Services\\User\\Register\\RegisterUserServiceTest::testItShouldCreateUserWhenUserDataProvidedIsValidAndReturnCreateUserData":0.077,"Tests\\Unit\\Validators\\Email\\EmailValidatorTest::testItShoudlThrowLogicalExceptionWithInvalidEmailMessageWhenEmailProvidedisInvalid":0,"Tests\\Unit\\Validators\\Email\\EmailValidatorTest::testItShouldReturnTrueWhenEmailProvidedIsValidEmail":0,"Tests\\Unit\\Validators\\User\\UserEmailValidatorTest::testItShoudlThrowLogicalExceptionWithInvalidEmailMessageWhenEmailProvidedisInvalid":0,"Tests\\Unit\\Validators\\User\\UserEmailValidatorTest::testItShouldThrowDomainExceptionWithEmailAlreadyExistsMessageWhenEmailProvidedIsValidButAlreadyExists":0,"Tests\\Unit\\Validators\\User\\UserEmailValidatorTest::testItShouldReturnNullWhenEmailProvidedisValidAndDoesNotExistsInDatabase":0,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserName#should return that the name field is required when the value of the name field is empty":0.008,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserName#should return that the name field is shorter than the allowed length when the value of the name field is less than the minimum":0.005,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserName#should return that the name field is longer than the allowed length when the value of the name field is more than the maximum":0.006,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserName#should return that the name field must be a string when the name field is not a valid string":0.173,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserEmail#should return that the email field is required when the value of the email field is empty":0.043,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserEmail#should return that the email field is invalid when the value of the email field is not a valid email":0.047,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserEmail#should return that the email field already exists when the email field already exists in the database":0.049,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserPassword#should return that the password field is required when the value of the password field is empty":0.007,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserPassword#should return that the password field is shorter than the min length when the value of the password field is shorter than the min length":0.005,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserPassword#should return that the password field does not contain numbers when the value of the password field does not contain numbers":0.005,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserPassword#should return that the password field does not contain symbols when the value of the password field does not contain symbols":0.005,"Tests\\Feature\\User\\Register\\RegisterUserTest::testValidateUserPassword#should return that the password field does not contain mixed case when the value of the password field does not contain mixed case":0.007,"Tests\\Feature\\User\\Register\\RegisterUserTest::testItShouldRegisterNewUserAndReturnCreatedUserData":0.063,"Tests\\Unit\\Validtors\\Auth\\HashValidatorTest::testItShouldReturnTrueWhenPasswordMatchCorrectlyWithPasswordHash":0.076,"Tests\\Unit\\Validtors\\Auth\\HashValidatorTest::testItShouldReturnFalsewhenPasswordDoesNotMatchCorrectlyWithPasswordHash":0.077,"Tests\\Feature\\Auth\\AuthenticateUserTest::testValidateUserEmail#should return that the email field is required when the value of the email field is empty":0.056,"Tests\\Feature\\Auth\\AuthenticateUserTest::testValidateUserEmail#should return that the email field is invalid when the value of the email field is not a valid email":0.009,"Tests\\Feature\\Auth\\AuthenticateUserTest::testValidateUserPassword#should return that the password field is required when the value of the password field is empty":0.02,"Tests\\Feature\\Auth\\AuthenticateUserTest::testValidateUserPassword#should return that the password field is shorter than the min length when the value of the password field is shorter than the min length":0.014,"Tests\\Feature\\Auth\\AuthenticateUserTest::testValidateUserPassword#should return that the password field does not contain numbers when the value of the password field does not contain numbers":0.005,"Tests\\Feature\\Auth\\AuthenticateUserTest::testValidateUserPassword#should return that the password field does not contain symbols when the value of the password field does not contain symbols":0.005,"Tests\\Feature\\Auth\\AuthenticateUserTest::testValidateUserPassword#should return that the password field does not contain mixed case when the value of the password field does not contain mixed case":0.005,"Tests\\Unit\\Services\\User\\Find\\FindUserByEmailServiceTest::testItShouldThrowLogicalExceptionWithInvalidEmailMessageWhenEmailProvidedIsInvalid":0,"Tests\\Unit\\Services\\User\\Find\\FindUserByEmailServiceTest::testItShouldReturnFalseWhenEmailProvidedIsValidButDoesNotExistInDatabase":0.001,"Tests\\Unit\\Services\\User\\Find\\FindUserByEmailServiceTest::testItShouldReturnUserWhenEmailProvidedIsValidAndExistsInDatabase":0.039,"Tests\\Unit\\Auth\\Authenticate\\AuthenticateUserServiceTest::testItShouldThrowLogicalExceptionWithInvalidEmailMessageWhenEmailProvidedIsInvalid":0.019,"Tests\\Unit\\Services\\Auth\\Authenticate\\AuthenticatorUserServiceTest::testItShouldThrowAuthenticationExceptionWithInvalidCredentialMessagesWhenUserDoesNotExists":0,"Tests\\Unit\\Services\\Auth\\Authenticate\\AuthenticatorUserServiceTest::testItShouldThrowAuthenticationExceptionWithInvalidCredentialMessagesWhenUserExistsButPasswordDoesNotMatch":0.077,"Tests\\Unit\\Services\\Auth\\Authenticate\\AuthenticatorUserServiceTest::testItShouldThrowAnyExceptionWhenUserExistsAndUserPasswordMatch":0.076,"Tests\\Unit\\Auth\\Authenticate\\AuthenticateUserServiceTest::testItShouldThrowAuthenticationExceptionWithInvalidCredentialMessagesWhenUserDoesNotExists":0.009,"Tests\\Unit\\Auth\\Authenticate\\AuthenticateUserServiceTest::testItShouldThrowAuthenticationExceptionWithInvalidCredentialMessagesWhenUserEmailDoesNotExists":0.01,"Tests\\Unit\\Auth\\Authenticate\\AuthenticateUserServiceTest::testItShouldThrowAuthenticationExceptionWithInvalidCredentialMessagesWhenUserExistsButPasswordDoesNotMatch":0.096,"Tests\\Unit\\Services\\Auth\\Token\\TokenExceptionHandlerTest::testItShouldReturnTokeWhenTokenIsString":0,"Tests\\Unit\\Services\\Auth\\Token\\TokenExceptionHandlerTest::testItShoudlThrowAuthenticationEXceptionWithInvalidCredentialsMessageWhenTokenIsNotATokenString":0.001,"Tests\\Unit\\Services\\Auth\\Token\\TokenGeneratorServiceTest::testItShoudlThrowAuthenticationEXceptionWithInvalidCredentialsMessageWhenUserCanNotAuthenticateWithCredentials":0.001,"Tests\\Unit\\Services\\Auth\\Token\\TokenGeneratorServiceTest::testItShoudlReturnUserTokenWhenUserCanAuthenticateWithValidCredentials":0.039,"Tests\\Unit\\Services\\Auth\\Token\\TokenGeneratorServiceTest::testItShoudlReturnTokenDTOWhenReceiveAUsertoken":0.039,"Tests\\Unit\\Auth\\Authenticate\\AuthenticateUserServiceTest::testItShouldReturnUserTokenDTOWithTokenSettingsWhenUserCrendetialsMatch":0.081,"Tests\\Unit\\Auth\\Authenticate\\AuthenticateUserServiceTest::testItShouldReturnUserTokenDTOWithTokenSettingsWhenUserCrendetialsMatchWithUserInDatabase":0.099,"Tests\\Feature\\Auth\\AuthenticateUserTest::testItShouldReturnInvalidCredentialsMessageWhenEmailProvidedIsValidButDoesNotExists":0.028,"Tests\\Feature\\Auth\\AuthenticateUserTest::testItShouldReturnInvalidCredentialsMessageWhenUserEmailExistsButPasswordIsInvalid":0.086,"Tests\\Feature\\Auth\\AuthenticateUserTest::testItshouldReturnUserTokenWhenCredentialsProvidedMatchWithUserInDatabase":0.128,"Tests\\Feature\\Task\\Register\\RegisterTaskTest::testItShouldReturnUnauthenticatedMessageWhenUserTryToCreateTaskButIsNotAuthenticated":0.039}}