{
    "openapi": "3.0.0",
    "info": {
        "title": "ESocial Tasks API Documentation",
        "description": "API Documentation for tasks management system",
        "contact": {
            "name": "Thiago",
            "email": "thiiagoms@proton.me"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000/api/documentation",
            "description": "API Documentation Server"
        }
    ],
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate user and return token",
                "description": "Authenticate user by providing their email and password. If the credentials are valid, a token is returned which can be used to authenticate subsequent requests.",
                "operationId": "5ffb40fc5cfdaf821f1d60f96a5bdbb3",
                "requestBody": {
                    "description": "User data for login",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthenticateUserSwaggerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TokenSwaggerResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server could not process the request due to invalid input."
                    }
                }
            }
        },
        "/api/v1/task": {
            "post": {
                "tags": [
                    "Task"
                ],
                "summary": "Create new task",
                "description": "Create a new task and receive the task data upon successful creation.",
                "operationId": "890b290ce6c50098e7b4b6d1d97f42eb",
                "requestBody": {
                    "description": "Task data for creation",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterTaskSwaggerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "description": "The unique identifier of the task.",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "title": {
                                            "description": "The title of the task.",
                                            "type": "string",
                                            "example": "My first task"
                                        },
                                        "description": {
                                            "description": "The description of the task.",
                                            "type": "string",
                                            "example": "Lorem Ipsum is simply dummy text..."
                                        },
                                        "status": {
                                            "description": "The status of the task.",
                                            "type": "string",
                                            "enum": [
                                                "todo",
                                                "doing",
                                                "done",
                                                "cancelled"
                                            ],
                                            "example": "todo"
                                        },
                                        "created_at": {
                                            "description": "The date and time when the task was created.",
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-10-15 23:19:39"
                                        },
                                        "updated_at": {
                                            "description": "The date and time when the task was updated.",
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-10-15 23:19:39"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server could not process the request due to invalid input."
                    },
                    "403": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "scalar": "bearerAuth"
                    }
                ]
            }
        },
        "/api/v1/task/{id}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Retrieves the detailed task record for the authenticated user.",
                "description": "Retrieves the detailed task record for the authenticated user but only task that the authenticated user has permission to view will be returned or if user is admin all tasks will be returned.",
                "operationId": "49abd4e729949b69f217e7d62429d904",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id (uuid) of the task record to be retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "description": "The unique identifier of the task.",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "title": {
                                            "description": "The title of the task.",
                                            "type": "string",
                                            "example": "My first task"
                                        },
                                        "description": {
                                            "description": "The description of the task.",
                                            "type": "string",
                                            "example": "Lorem Ipsum is simply dummy text..."
                                        },
                                        "status": {
                                            "description": "The status of the task.",
                                            "type": "string",
                                            "enum": [
                                                "todo",
                                                "doing",
                                                "done",
                                                "cancelled"
                                            ],
                                            "example": "todo"
                                        },
                                        "created_at": {
                                            "description": "The date and time when the task was created.",
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-10-15 23:19:39"
                                        },
                                        "updated_at": {
                                            "description": "The date and time when the task was updated.",
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-10-15 23:19:39"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server could not process the request due to invalid input."
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "scalar": "bearerAuth"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Update the specified task in database.",
                "description": "Update the specified task in database but only tasks that the authenticated user has permission to update will be updated except if user is admin.",
                "operationId": "d25c79dd74c9c2a3659cc293a698ddba",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id (uuid) of the task record to be updated.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Task data for update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "description",
                                    "status"
                                ],
                                "properties": {
                                    "title": {
                                        "description": "The title of the task.",
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "My first task"
                                    },
                                    "description": {
                                        "description": "The description of the task.",
                                        "type": "string",
                                        "example": "Lorem Ipsum is simply dummy text..."
                                    },
                                    "status": {
                                        "description": "The status of the task.",
                                        "type": "string",
                                        "enum": [
                                            "todo",
                                            "doing",
                                            "done",
                                            "cancelled"
                                        ],
                                        "example": "todo"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server could not process the request due to invalid input."
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Task"
                ],
                "summary": "Remove the specified task from database.",
                "description": "Remove the specified task from database but only task that the authenticated user has permission to delete will be deleted or if user is admin.",
                "operationId": "451558bf818b427ada76650a5ff8721f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id (uuid) of the task record to be deleted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Operation success"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "403": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "scalar": "bearerAuth"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Task"
                ],
                "summary": "Update the specified task in database.",
                "description": "Update the specified task in database but only tasks that the authenticated user has permission to update will be updated except if user is admin.",
                "operationId": "41c154fbe44f3ce612d9d2a9ec48a6c2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id (uuid) of the task record to be updated.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Task data for partial update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "description": "The title of the task.",
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "My updated title"
                                    },
                                    "description": {
                                        "description": "The description of the task.",
                                        "type": "string",
                                        "example": "Updated description..."
                                    },
                                    "status": {
                                        "description": "The status of the task.",
                                        "type": "string",
                                        "enum": [
                                            "todo",
                                            "doing",
                                            "done",
                                            "cancelled"
                                        ],
                                        "example": "done"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server could not process the request due to invalid input."
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/register": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Requests a new user",
                "description": "Registers a new user and returns the created user data.",
                "operationId": "registerUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterUserSwaggerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User successfully registered",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSwaggerResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication error or unauthorized error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "object",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "object",
                                            "example": "Error message about field validation error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AuthenticateUserSwaggerRequest": {
                "title": "Authenticate user request",
                "description": "Base request for user authentication operation.",
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "description": "A valid email address.",
                        "type": "string",
                        "format": "email",
                        "example": "john@example.com"
                    },
                    "password": {
                        "description": "Password with at least one uppercase letter, one lowercase letter, one number, and one special character.",
                        "type": "string",
                        "minLength": 8,
                        "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^a-zA-Z\\d]).+$",
                        "example": "@p5sSw0rd!"
                    }
                },
                "type": "object",
                "example": {
                    "email": "john@example.com",
                    "password": "@p5sSw0rd!"
                }
            },
            "TokenSwaggerResponse": {
                "title": "Token for authenticate user request",
                "description": "Response containing authentication token",
                "properties": {
                    "token": {
                        "description": "The token for the user.",
                        "type": "string",
                        "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    },
                    "token_type": {
                        "description": "The type of the token.",
                        "type": "string",
                        "example": "Bearer"
                    },
                    "expires_in": {
                        "description": "The expiration time of the token.",
                        "type": "integer",
                        "example": 3600
                    }
                },
                "type": "object"
            },
            "RegisterTaskSwaggerRequest": {
                "title": "Task register request",
                "description": "Base request for create new task for authenticated user",
                "properties": {
                    "title": {
                        "description": "The title of the task.",
                        "type": "string",
                        "maxLength": 100,
                        "example": "My first task"
                    },
                    "description": {
                        "description": "The description of the task.",
                        "type": "string",
                        "example": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book"
                    },
                    "status": {
                        "description": "The status of the task.",
                        "type": "string",
                        "enum": [
                            "todo",
                            "doing",
                            "done",
                            "cancelled"
                        ],
                        "example": "todo"
                    }
                },
                "type": "object"
            },
            "TaskSwaggerResponse": {
                "title": "Task Response",
                "description": "Task response",
                "properties": {
                    "id": {
                        "title": "Id",
                        "description": "The unique identifier of the task.",
                        "type": "string",
                        "format": "uuid"
                    },
                    "title": {
                        "description": "The title of the task.",
                        "type": "string",
                        "example": "My first task"
                    },
                    "description": {
                        "description": "The description of the task.",
                        "type": "string",
                        "example": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book"
                    },
                    "status": {
                        "description": "The status of the task.",
                        "type": "string",
                        "enum": [
                            "todo",
                            "doing",
                            "done",
                            "cancelled"
                        ],
                        "example": "todo"
                    },
                    "created_at": {
                        "title": "created at",
                        "description": "The date and time when the task was created",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-10-15 23:19:39"
                    },
                    "updated_at": {
                        "title": "updated at",
                        "description": "The date and time when the task was updated",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-10-15 23:19:39"
                    }
                },
                "type": "object"
            },
            "RegisterUserSwaggerRequest": {
                "title": "Register user request",
                "description": "Base request for user register operation.",
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "name": {
                        "description": "The full name of the user.",
                        "type": "string",
                        "maxLength": 150,
                        "minLength": 3,
                        "example": "John Doe"
                    },
                    "email": {
                        "description": "A valid email address.",
                        "type": "string",
                        "format": "email",
                        "example": "john@example.com"
                    },
                    "password": {
                        "description": "Password with at least one uppercase letter, one lowercase letter, one number, and one special character.",
                        "type": "string",
                        "minLength": 8,
                        "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^a-zA-Z\\d]).+$",
                        "example": "@p5sSw0rd!"
                    }
                },
                "type": "object",
                "example": {
                    "name": "John Doe",
                    "email": "john@example.com",
                    "password": "@p5sSw0rd!"
                }
            },
            "UserSwaggerResponse": {
                "title": "User response",
                "description": "Base response for user CRUD operations",
                "properties": {
                    "data": {
                        "title": "Data",
                        "description": "The data of the created user.",
                        "properties": {
                            "id": {
                                "title": "Id",
                                "description": "The unique identifier of the user.",
                                "type": "string",
                                "format": "uuid"
                            },
                            "name": {
                                "title": "Name",
                                "description": "The name of the user.",
                                "type": "string",
                                "example": "John Doe"
                            },
                            "email": {
                                "title": "Email",
                                "description": "The email address of the user.",
                                "type": "string",
                                "format": "email",
                                "example": "johndoe@example.com"
                            },
                            "created_at": {
                                "title": "Created at",
                                "description": "The date and time when the user was created.",
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-01-01 12:00:00"
                            },
                            "updated_at": {
                                "title": "Updated at",
                                "description": "The date and time when the user was updated.",
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-01-01 12:00:00"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Auth",
            "description": "Auth"
        },
        {
            "name": "Task",
            "description": "Task"
        },
        {
            "name": "User",
            "description": "User"
        }
    ]
}